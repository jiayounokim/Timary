apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
androidExtensions {
    experimental = true
}
apply plugin: 'kotlin-kapt'
kapt {
    correctErrorTypes = true
}
apply plugin: 'io.fabric'
apply from: '../versioning.gradle'
apply from: teamConfig('staticCodeAnalysis/ktlint.gradle')
apply from: teamConfig('staticCodeAnalysis/detekt.gradle')

android {
    compileSdkVersion rootProject.ext.compile_sdk_version

    defaultConfig {
        applicationId "com.github.ojh102.timary"
        minSdkVersion rootProject.ext.min_sdk_version
        targetSdkVersion rootProject.ext.target_sdk_version
        versionCode buildVersionCode()
        versionName buildVersionName()
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    dataBinding {
        enabled = true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        debug {
            storeFile file("../keystore/debug.keystore")
            storePassword "android"
            keyAlias "androiddebugkey"
            keyPassword "android"
        }

        release {
            keyAlias System.getenv("BITRISEIO_ANDROID_KEYSTORE_ALIAS")
            keyPassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PRIVATE_KEY_PASSWORD")
            storeFile file(System.getenv("HOME") + "/keystores/my_keystore.jks")
            storePassword System.getenv("BITRISEIO_ANDROID_KEYSTORE_PASSWORD")
        }
    }

    buildTypes {
        debug {
            ext.crashlyticsApiKey = System.getenv("TIMARY_DEBUG_FABRIC_API_KEY")
            ext.crashlyticsApiSecret = System.getenv("TIMARY_DEBUG_FABRIC_API_SECRET")
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"

            debuggable true
            zipAlignEnabled false
            minifyEnabled false
            multiDexEnabled true
        }

        qa {
            ext.crashlyticsApiKey = System.getenv("TIMARY_QA_FABRIC_API_KEY")
            ext.crashlyticsApiSecret = System.getenv("TIMARY_QA_FABRIC_API_SECRET")

            signingConfig signingConfigs.debug
            applicationIdSuffix ".qa"

            debuggable true
            zipAlignEnabled true
            minifyEnabled true
            multiDexEnabled false
            shrinkResources true
            crunchPngs true

            proguardFiles getDefaultProguardFile('proguard-android.txt')
            proguardFiles file('../proguard').listFiles()
            println(proguardFiles)
        }

        release {
            ext.crashlyticsApiKey = System.getenv("TIMARY_RELEASE_FABRIC_API_KEY")
            ext.crashlyticsApiSecret = System.getenv("TIMARY_RELEASE_FABRIC_API_SECRET")

            signingConfig null

            debuggable false
            zipAlignEnabled true
            minifyEnabled true
            multiDexEnabled false
            shrinkResources true
            crunchPngs true

            proguardFiles getDefaultProguardFile('proguard-android.txt')
            proguardFiles file('../proguard').listFiles()
            println(proguardFiles)
        }
    }

    applicationVariants.all { variant ->
        variant.outputs.all {
            outputFileName = getApkName(variant.buildType.name)
        }

        variant.outputs.each { output ->
            tasks.findAll {
                it.name.startsWith("crashlyticsUploadDistribution${variant.name.capitalize()}")
            }.each {
                it.doFirst {
                    ext.betaDistributionApkFilePath = System.getenv('BITRISE_SIGNED_APK_PATH')
                }
            }
        }
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$rootProject.kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutines_version"

    // Jetpack
    implementation "androidx.appcompat:appcompat:$rootProject.appcompat_version"
    implementation "androidx.fragment:fragment:$rootProject.fragment_version"
    implementation "androidx.fragment:fragment-ktx:$rootProject.fragment_version"
    implementation "androidx.recyclerview:recyclerview:$rootProject.recyclerview_version"
    implementation "androidx.annotation:annotation:$rootProject.annotation_version"
    implementation "com.google.android.material:material:$rootProject.material_version"
    implementation "androidx.constraintlayout:constraintlayout:$rootProject.constraint_layout_version"
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$rootProject.lifecycle_version"
    implementation "androidx.paging:paging-runtime:$rootProject.paging_version"
    implementation "androidx.room:room-runtime:$rootProject.room_version"
    implementation "androidx.room:room-rxjava2:$rootProject.room_version"
    implementation "androidx.core:core-ktx:$rootProject.ktxVersion"
    implementation "androidx.navigation:navigation-fragment:$rootProject.navigation_version"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navigation_version"
    kapt "androidx.room:room-compiler:$rootProject.room_version"
    kapt "androidx.databinding:databinding-compiler:$rootProject.android_gradle_version"

    // DI
    implementation "com.google.dagger:dagger:$rootProject.dagger_version"
    implementation "com.google.dagger:dagger-android-support:$rootProject.dagger_version"
    implementation "com.google.dagger:dagger-android:$rootProject.dagger_version"
    kapt "com.google.dagger:dagger-compiler:$rootProject.dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.dagger_version"

    // Rx
    implementation "io.reactivex.rxjava2:rxjava:$rootProject.rx_java_version"
    implementation "io.reactivex.rxjava2:rxandroid:$rootProject.rx_android_version"
    implementation "io.reactivex.rxjava2:rxkotlin:$rootProject.rx_kotlin_version"
    implementation "com.jakewharton.rxrelay2:rxrelay:$rootProject.rx_relay_version"
    implementation "com.github.tbruyelle:rxpermissions:$rootProject.rx_permissions_verison"

    // Date
    implementation "com.jakewharton.threetenabp:threetenabp:$rootProject.threetenabp_version"

    // Debug
    implementation "com.jakewharton.timber:timber:$rootProject.timber_version"
    implementation "com.facebook.stetho:stetho:$rootProject.stetho_version"
    implementation "com.facebook.stetho:stetho-okhttp3:$rootProject.stetho_version"
    implementation("com.crashlytics.sdk.android:crashlytics:$rootProject.crashlytics_version") {
        transitive = true
    }

    // Lottie
    implementation "com.airbnb.android:lottie:$rootProject.lottie_version"

    // Test
    testImplementation "junit:junit:$rootProject.junit_version"
    testImplementation "org.threeten:threetenbp:$rootProject.threetenabp_test_version"
    androidTestImplementation "org.threeten:threetenbp:$rootProject.threetenabp_test_version"
    androidTestImplementation "junit:junit:$rootProject.junit_version"
    androidTestImplementation "androidx.room:room-testing:$rootProject.room_version"
    androidTestImplementation "androidx.test.ext:junit:${rootProject.ext_junit_version}"
    androidTestImplementation "androidx.test:rules:$rootProject.rules_version"
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.arch_core_testing_version"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espresso_version"
}

apply plugin: 'com.google.gms.google-services'
